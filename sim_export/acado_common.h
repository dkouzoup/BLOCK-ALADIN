/*
 *    This file was auto-generated by ACADO Code Generation Tool.
 *    
 *    ACADO Code Generation tool is a sub-package of ACADO toolkit --
 *    A Toolkit for Automatic Control and Dynamic Optimization.
 *    Copyright (C) 2008-2014 by Boris Houska, Hans Joachim Ferreau,
 *    Milan Vukov, Rien Quirynen, KU Leuven.
 *    Developed within the Optimization in Engineering Center (OPTEC)
 *    under supervision of Moritz Diehl. All rights reserved.
 *    
 *    ACADO Toolkit is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 3 of the License, or (at your option) any later version.
 *    
 *    ACADO Toolkit is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *    
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with ACADO Toolkit; if not, write to the Free Software
 *    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA
 *    
 */


#ifndef ACADO_COMMON_H
#define ACADO_COMMON_H

#include <math.h>
#include <string.h>

#ifndef __MATLAB__
#ifdef __cplusplus
extern "C"
{
#endif /* __cplusplus */
#endif /* __MATLAB__ */

/** \defgroup ACADO ACADO CGT generated module. */
/** @{ */

/** qpOASES QP solver indicator. */
#define ACADO_QPOASES 0
/** FORCES QP solver indicator.*/
#define ACADO_FORCES  1
/** qpDUNES QP solver indicator.*/
#define ACADO_QPDUNES 2
/** HPMPC QP solver indicator. */
#define ACADO_HPMPC 3
/** Indicator for determining the QP solver used by the ACADO solver code. */
/** Definition of the floating point data type. */
typedef double real_t;


/*
 * Common definitions
 */
/** Number of control/estimation intervals. */
#define ACADO_N 1
/** Number of online data values. */
#define ACADO_NOD 0
/** Number of control variables. */
#define ACADO_NU 2
/** Number of output functions. */
#define ACADO_NUMOUT 0
/** Number of differential variables. */
#define ACADO_NX 8
/** Number of algebraic variables. */
#define ACADO_NXA 0
/** Number of differential derivative variables. */
#define ACADO_NXD 0


/*
 * Globally used structure definitions
 */

/** The structure containing the user data.
 * 
 *  Via this structure the user "communicates" with the solver code.
 */
typedef struct ACADOvariables_
{
int dummy;

} ACADOvariables;

/** Private workspace used by the auto-generated code.
 * 
 *  Data members of this structure are private to the solver.
 *  In other words, the user code should not modify values of this 
 *  structure. 
 */
typedef struct ACADOworkspace_
{
real_t rk_dim4_swap;

/** Column vector of size: 4 */
real_t rk_dim4_bPerm[ 4 ];

/** Column vector of size: 8 */
real_t acado_aux[ 8 ];

real_t rk_ttt;

/** Row vector of size: 10 */
real_t rk_xxx[ 10 ];

/** Matrix of size: 8 x 2 (row major format) */
real_t rk_kkk[ 16 ];

/** Matrix of size: 4 x 4 (row major format) */
real_t rk_A[ 16 ];

/** Column vector of size: 12 */
real_t rk_b[ 12 ];

/** Row vector of size: 4 */
int rk_dim4_perm[ 4 ];

/** Column vector of size: 8 */
real_t rk_rhsTemp[ 8 ];

/** Matrix of size: 2 x 20 (row major format) */
real_t rk_diffsTemp2[ 40 ];

/** Matrix of size: 8 x 2 (row major format) */
real_t rk_diffK[ 16 ];

/** Matrix of size: 6 x 8 (row major format) */
real_t rk_diffsNew1[ 48 ];

/** Matrix of size: 2 x 10 (row major format) */
real_t rk_diffsNew2[ 20 ];


} ACADOworkspace;

/* 
 * Forward function declarations. 
 */


/** Performs the integration and sensitivity propagation for one shooting interval.
 *
 *  \param rk_eta Working array of size 10 to pass the input values and return the results.
 *  \param resetIntegrator The internal memory of the integrator can be reset.
 *
 *  \return Status code of the integrator.
 */
int integrate( real_t* const rk_eta, int resetIntegrator );

/** Evaluates the right-hand side of the full model.
 *
 *  \param x The state and parameter values.
 *  \param f Right-hand side evaluation.
 */
void full_rhs( real_t* const x, real_t* const f );


/* 
 * Extern declarations. 
 */

extern ACADOworkspace acadoWorkspace;
extern ACADOvariables acadoVariables;

/** @} */

#ifndef __MATLAB__
#ifdef __cplusplus
} /* extern "C" */
#endif /* __cplusplus */
#endif /* __MATLAB__ */

#endif /* ACADO_COMMON_H */
